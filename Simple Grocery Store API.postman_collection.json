{
	"info": {
		"_postman_id": "c67c4cef-54df-4c69-8368-1c70f3466890",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32897641"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status should be UP\", () => {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status?=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('At least one available product exist', () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.an('array');\r",
									"    pm.expect(response.length).to.be.above(0);\r",
									"\r",
									"    const product = response[2];\r",
									"    pm.expect(product).to.be.an('object');\r",
									"    pm.expect(product).to.haveOwnProperty('id');\r",
									"    pm.expect(product.id).to.be.a('number');\r",
									"    pm.expect(product).to.haveOwnProperty('inStock');\r",
									"    pm.expect(product.inStock).to.be.true;\r",
									"\r",
									"    pm.environment.set('productId', product.id);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=10&available=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "results",
									"value": "10"
								},
								{
									"key": "available",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json()\r",
									"\r",
									"pm.test(\"Response is an object\", () => {\r",
									"    pm.expect(response).to.be.an('object');\r",
									"});\r",
									"\r",
									"console.log(response);\r",
									"\r",
									"pm.test('Correct product was retrive', () => {\r",
									"    const requestedProductId = pm.environment.get('productId');\r",
									"    console.log(requestedProductId);\r",
									"    pm.expect(response.id).to.eql(requestedProductId);\r",
									"});\r",
									"\r",
									"pm.test('Product name', () => { \r",
									"pm.expect(response.name).to.eql('Ethical Bean Medium Dark Roast, Espresso')\r",
									"});\r",
									"\r",
									"pm.test('Product price', () => {\r",
									"pm.expect(response.price).to.eql(7.78)\r",
									"});\r",
									"\r",
									"pm.test('Product in stock', () => {\r",
									"pm.expect(response.inStock).to.be.true\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"query": [
								{
									"key": "category",
									"value": "diary",
									"disabled": true
								},
								{
									"key": "product-label",
									"value": "true",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Have Cart Id\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response).to.haveOwnProperty('cartId');\r",
									"    pm.expect(response.cartId).to.be.a('string');\r",
									"\r",
									"\r",
									"    pm.environment.set('cartId', response.cartId);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Category</th>\r",
									"        <th>Name</th>\r",
									"        <th>In Stock</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response.items}}\r",
									"        <tr>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{category}}</td>\r",
									"            <td>{{name}}</td>\r",
									"            <td>{{inStock}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var res = pm.response.json();\r",
									"    var visualizerData = { items: [] };\r",
									"\r",
									"    if (Array.isArray(res) && res.length > 0) {\r",
									"        visualizerData.items = res.map((item) => {\r",
									"            return {\r",
									"                id: item.id || \"\",\r",
									"                category: item.category || \"\",\r",
									"                name: item.name || \"\",\r",
									"                inStock: item.inStock || \"\"\r",
									"            };\r",
									"        });\r",
									"    }\r",
									"\r",
									"    return { response: visualizerData };\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Al least have one item in the Card Id\", () => {\r",
									"    const response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.an('array');\r",
									"    pm.expect(response.length).to.be.above(0);\r",
									"\r",
									"    const item = response[0];\r",
									"    pm.expect(item).to.be.an('object');\r",
									"    pm.expect(item).to.haveOwnProperty('id');\r",
									"    pm.expect(item.id).to.be.a('number');\r",
									"    pm.expect(item).to.haveOwnProperty('productId');\r",
									"    pm.expect(item.productId).to.be.a('number');\r",
									"\r",
									"    pm.collectionVariables.set('lastAddedItemId', item.id)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Item was creates', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response.created).to.be.true;\r",
									"    pm.expect(response.itemId).to.be.a('number');\r",
									"\r",
									"    pm.environment.set('lastAddedItemId', response.itemId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"productId\": {{productId}},\r\n   \"quantity\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"query": [
								{
									"key": "productId",
									"value": null,
									"disabled": true
								},
								{
									"key": "quantity",
									"value": null,
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						},
						"description": "### Add Item to Cart\n\nThis endpoint allows the addition of an item to a specific cart.\n\n#### Request Body\n\n- `productId` (required): The ID of the product to be added to the cart.\n    \n\n#### Response\n\nUpon successful addition, the response will have a status code of 201 and the following JSON data:\n\n``` json\n{\n    \"created\": true,\n    \"itemId\": 0\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Update quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber (minValue, maxValue) {\r",
									"    return Math.floor(Math.random() * (maxValue - minValue + 1)) + minValue;\r",
									"}\r",
									"\r",
									"pm.environment.set('randomQuantity', getRandomNumber(1, 10));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": {{randomQuantity}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace product in a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\": 5478,\r\n    \"quantity\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"query": [
								{
									"key": "cartId",
									"value": "BxZzZEJMebUcUYxCYO-Bn",
									"disabled": true
								},
								{
									"key": "customerName",
									"value": "Rendi1",
									"disabled": true
								},
								{
									"key": "comment",
									"value": "I want to order one cup of cofee",
									"disabled": true
								},
								{
									"key": "orderId",
									"value": "Z1SP0koinZyo1ogVzy6dC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item in cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accesToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"query": [
								{
									"key": "cartId",
									"value": "BxZzZEJMebUcUYxCYO-Bn",
									"disabled": true
								},
								{
									"key": "customerName",
									"value": "Rendi1",
									"disabled": true
								},
								{
									"key": "comment",
									"value": "I want to order one cup of cofee",
									"disabled": true
								},
								{
									"key": "orderId",
									"value": "Z1SP0koinZyo1ogVzy6dC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Postman on Valentin's computer\",\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Succesfully create an order\", () =>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response.orderId).to.be.a('string');\r",
									"    pm.expect(response.created).to.be.true;\r",
									"\r",
									"    pm.environment.set('orderId', response.orderId);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"disabled": true
								},
								{
									"key": "customerName",
									"value": "Rendi1",
									"disabled": true
								},
								{
									"key": "comment",
									"value": "I want to order one cup of cofee",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Created order is in the list', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.find((order) => order.id === pm.environment.get('orderId'))).to.be.an('object');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "cartId",
									"value": "BxZzZEJMebUcUYxCYO-Bn",
									"disabled": true
								},
								{
									"key": "customerName",
									"value": "Rendi1",
									"disabled": true
								},
								{
									"key": "comment",
									"value": "I want to order one cup of cofee",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"Cindy Zahra\",\r\n    \"comment\": \"I will pick up at 4 PM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"query": [
								{
									"key": "cartId",
									"value": "BxZzZEJMebUcUYxCYO-Bn",
									"disabled": true
								},
								{
									"key": "customerName",
									"value": "Rendi1",
									"disabled": true
								},
								{
									"key": "comment",
									"value": "I want to order one cup of cofee",
									"disabled": true
								},
								{
									"key": "orderId",
									"value": "Z1SP0koinZyo1ogVzy6dC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"query": [
								{
									"key": "cartId",
									"value": "BxZzZEJMebUcUYxCYO-Bn",
									"disabled": true
								},
								{
									"key": "customerName",
									"value": "Rendi1",
									"disabled": true
								},
								{
									"key": "comment",
									"value": "I want to order one cup of cofee",
									"disabled": true
								},
								{
									"key": "orderId",
									"value": "Z1SP0koinZyo1ogVzy6dC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('Error message contains the deledted order id', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.haveOwnProperty('error');\r",
									"    pm.expect(response.error).to.contain(pm.variables.get('orderId'));\r",
									"    pm.expect(response.error).to.include(pm.variables.get('orderId'));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"query": [
								{
									"key": "cartId",
									"value": "BxZzZEJMebUcUYxCYO-Bn",
									"disabled": true
								},
								{
									"key": "customerName",
									"value": "Rendi1",
									"disabled": true
								},
								{
									"key": "comment",
									"value": "I want to order one cup of cofee",
									"disabled": true
								},
								{
									"key": "orderId",
									"value": "Z1SP0koinZyo1ogVzy6dC",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing Authentication",
			"item": [
				{
					"name": "Invalid Token",
					"item": [
						{
							"name": "Create an order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer 98d7fb17cb66d19b628333c9917a65b36a14a9c519f1b03e1e36847e5aaae20f1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"_2zni7CFTfV7XgCncTBPF\",\r\n    \"customerName\": \"Rendi Firmansyah\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "cartId",
											"value": "{{cartId}}",
											"disabled": true
										},
										{
											"key": "customerName",
											"value": "Rendi1",
											"disabled": true
										},
										{
											"key": "comment",
											"value": "I want to order one cup of cofee",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer 98d7fb17cb66d19b628333c9917a65b36a14a9c519f1b03e1e36847e5aaae20f1",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "cartId",
											"value": "BxZzZEJMebUcUYxCYO-Bn",
											"disabled": true
										},
										{
											"key": "customerName",
											"value": "Rendi1",
											"disabled": true
										},
										{
											"key": "comment",
											"value": "I want to order one cup of cofee",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test('Error message is \"Invalid bearer token.\"', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Invalid bearer token.\");\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Missing Header",
					"item": [
						{
							"name": "Create an order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"_2zni7CFTfV7XgCncTBPF\",\r\n    \"customerName\": \"Rendi Firmansyah\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "cartId",
											"value": "{{cartId}}",
											"disabled": true
										},
										{
											"key": "customerName",
											"value": "Rendi1",
											"disabled": true
										},
										{
											"key": "comment",
											"value": "I want to order one cup of cofee",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									],
									"query": [
										{
											"key": "cartId",
											"value": "BxZzZEJMebUcUYxCYO-Bn",
											"disabled": true
										},
										{
											"key": "customerName",
											"value": "Rendi1",
											"disabled": true
										},
										{
											"key": "comment",
											"value": "I want to order one cup of cofee",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Error message\", () =>{\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Missing Authorization header.\");\r",
									"})"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Invalid Inputs",
			"item": [
				{
					"name": "Get all products - Invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.have.string('Invalid value for query parameter \\'category\\'.')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=Invalid category",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "Invalid category"
								},
								{
									"key": "results",
									"value": "10",
									"disabled": true
								},
								{
									"key": "available",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Results > maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Invalid value for query parameter 'results'. Cannot be greater than 20.\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=21",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "results",
									"value": "21"
								},
								{
									"key": "available",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products - Results < minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    const expectedError = \"Invalid value for query parameter 'results'. Must be greater than 0.\"\r",
									"    pm.expect(response.error).to.eql(expectedError);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "results",
									"value": "-1"
								},
								{
									"key": "available",
									"value": "false",
									"disabled": true
								}
							]
						},
						"description": "### GET /products\n\nThis endpoint retrieves a list of products with optional query parameters.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{baseUrl}}/products`\n    \n- Query Parameters:\n    \n    - `results` (optional, integer): Specifies the number of results to be returned. Use `-1` to retrieve all results.\n        \n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\"\n      },\n      \"category\": {\n        \"type\": \"string\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"inStock\": {\n        \"type\": \"boolean\"\n      }\n    },\n    \"required\": [\"id\", \"category\", \"name\", \"inStock\"]\n  }\n}\n\n ```\n\n- Status Code: 200\n    \n- Content-Type: application/json\n    \n\n#### Example Response\n\n``` json\n[\n  {\n    \"id\": 0,\n    \"category\": \"\",\n    \"name\": \"\",\n    \"inStock\": true\n  }\n]\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get all products - Results = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.environment.name);\r",
									"\r",
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    const expectedError = \"Invalid value for query parameter 'results'. Must be greater than 0.\"\r",
									"    pm.expect(response.error).to.eql(expectedError);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "results",
									"value": "0"
								},
								{
									"key": "available",
									"value": "false",
									"disabled": true
								}
							]
						},
						"description": "### GET /products\n\nThis endpoint retrieves a list of products with optional query parameters.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{baseUrl}}/products`\n    \n- Query Parameters:\n    \n    - `results` (optional, integer): Specifies the number of results to be returned. Use `-1` to retrieve all results.\n        \n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": {\n        \"type\": \"integer\"\n      },\n      \"category\": {\n        \"type\": \"string\"\n      },\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"inStock\": {\n        \"type\": \"boolean\"\n      }\n    },\n    \"required\": [\"id\", \"category\", \"name\", \"inStock\"]\n  }\n}\n\n ```\n\n- Status Code: 200\n    \n- Content-Type: application/json\n    \n\n#### Example Response\n\n``` json\n[\n  {\n    \"id\": 0,\n    \"category\": \"\",\n    \"name\": \"\",\n    \"inStock\": true\n  }\n]\n\n ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Status Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let colors = ['Red', 'Blue', 'Green'];\r",
							"colors.shift('Blue');  // Menghapus item pertama ('Red')\r",
							"console.log(colors);  // Output: ['Blue', 'Green']\r",
							"\r",
							"let employees = [\r",
							"    {\r",
							"        firstName: 'Jamie',\r",
							"        lastName: 'Doe',\r",
							"        age: 29,\r",
							"        hobbies: ['travelling', 'yoga']\r",
							"    },\r",
							"    {\r",
							"        firstName: 'Jake',\r",
							"        lastName: 'Doe',\r",
							"        age: 34,\r",
							"        hobbies: ['hiking', 'photography', 'cooking']\r",
							"    }\r",
							"];\r",
							"\r",
							"console.log(employees);\r",
							"\r",
							"const numbers = [24, 46, 25, 67];\r",
							"\r",
							"const person = {\r",
							"    firstName: 'Jamie',\r",
							"    lastName: 'Doe',\r",
							"    age: 31,\r",
							"    socialProfiles: ['Facebook', 'Tiktok', 'Instagram']\r",
							"};\r",
							"\r",
							"console.log(numbers);\r",
							"\r",
							"console.log(person.socialProfiles[0]);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "API Status Copy 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.clear();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status should be UP\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(\"UP\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": ""
		}
	]
}